function [pval, k, K] = kuipertest(alpha1, alpha2, res, vis_on)
%KUIPERTEST Tests whether two samples differ significantly, similar to Kolmogorov-Smirnov test but for circular data.
%
% [pval, k, K] = circ.kuipertest(sample1, sample2, res, vis_on)
%
%   The Kuiper two-sample test tests whether the two samples differ 
%   significantly.The difference can be in any property, such as mean 
%   location and dispersion. It is a circular analogue of the 
%   Kolmogorov-Smirnov test.  
% 
%   H0: The two distributions are identical.
%   HA: The two distributions are different.
%
% Input: 
%   alpha1    fist sample (in radians)
%   alpha2    second sample (in radians)
%   res       resolution at which the cdf is evaluated
%   vis_on    display graph
%
% Output:
%   pval        p-value; the smallest of .10, .05, .02, .01, .005, .002,
%               .001, for which the test statistic is still higher
%               than the respective critical value. this is due to
%               the use of tabulated values. if p>.1, pval is set to 1.
%   k           test statistic
%   K           critical value
% 
% References:
%   Batschelet, 1980, p. 112
%
% Circular Statistics Toolbox for Matlab
%
% Update 2012
% By Marc J. Velasco and Philipp Berens, 2009
% velasco@ccs.fau.edu
%
% See also: Contents


if nargin < 3
    res = 100;
end
if nargin < 4
    vis_on = 0;
end

n = length(alpha1(:));
m = length(alpha2(:));

% create cdfs of both samples
[phis1, cdf1, phiplot1, cdfplot1] = circ.samplecdf(alpha1, res);
[foo, cdf2, phiplot2, cdfplot2] = circ.samplecdf(alpha2, res); %#ok<ASGLU>

% maximal difference between sample cdfs
[dplus, gdpi] = max([0 cdf1-cdf2]);
[dminus, gdmi] = max([0 cdf2-cdf1]);

% calculate k-statistic
k = n * m * (dplus + dminus);

% find p-value
[pval, K] = kuiperlookup(min(n,m),k/sqrt(n*m*(n+m)));
K = K * sqrt(n*m*(n+m));


% visualize
if vis_on
    figure 
    plot(phiplot1, cdfplot1, 'b', phiplot2, cdfplot2, 'r');
    hold on
    plot([phis1(gdpi-1), phis1(gdpi-1)], [cdf1(gdpi-1) cdf2(gdpi-1)], 'o:g');
    plot([phis1(gdmi-1), phis1(gdmi-1)], [cdf1(gdmi-1) cdf2(gdmi-1)], 'o:g');
    hold off
    set(gca, 'XLim', [0, 2*pi]);
    set(gca, 'YLim', [0, 1.1]);
    xlabel('Circular Location')
    ylabel('Sample CDF')
    title('CircStat: Kuiper test')
    h = legend('Sample 1', 'Sample 2', 'Location', 'Southeast');
    set(h,'box','off')
    set(gca, 'XTick', pi*(0:.25:2))
    set(gca, 'XTickLabel', {'0', '', '', '', 'pi', '', '', '', '2pi'}) 
end



end

function [p, K] = kuiperlookup(n, k)
%KUIPERLOOKUP Reference to kuiper table to compute [p, K]

% load kuipertable.mat;
ktable = [5,1.45800000000000,1.56500000000000,1.68200000000000,1.76300000000000,1.83800000000000,1.92000000000000,1.97000000000000;6,1.47100000000000,1.58200000000000,1.71100000000000,1.79300000000000,1.86700000000000,1.95700000000000,2.02000000000000;7,1.48300000000000,1.59800000000000,1.72700000000000,1.81400000000000,1.89400000000000,1.98700000000000,2.05100000000000;8,1.49300000000000,1.60800000000000,1.74100000000000,1.83000000000000,1.91100000000000,2.00900000000000,2.07700000000000;9,1.50000000000000,1.61800000000000,1.75200000000000,1.84300000000000,1.92600000000000,2.02700000000000,2.09700000000000;10,1.50700000000000,1.62500000000000,1.76100000000000,1.85400000000000,1.93800000000000,2.04100000000000,2.11300000000000;11,1.51300000000000,1.63100000000000,1.76900000000000,1.86200000000000,1.94800000000000,2.05300000000000,2.12600000000000;12,1.51700000000000,1.63700000000000,1.77600000000000,1.87000000000000,1.95700000000000,2.06200000000000,2.13700000000000;13,1.52200000000000,1.64200000000000,1.78200000000000,1.87600000000000,1.96400000000000,2.07100000000000,2.15400000000000;14,1.52500000000000,1.64600000000000,1.78700000000000,1.88200000000000,1.97000000000000,2.07800000000000,2.15400000000000;15,1.52900000000000,1.65000000000000,1.79100000000000,1.88700000000000,1.97600000000000,2.08500000000000,2.16100000000000;16,1.53200000000000,1.65300000000000,1.79500000000000,1.89200000000000,1.98100000000000,2.09000000000000,2.16800000000000;17,1.53400000000000,1.65700000000000,1.79900000000000,1.89600000000000,1.98600000000000,2.09600000000000,2.17300000000000;18,1.53700000000000,1.65900000000000,1.80200000000000,1.89900000000000,1.99000000000000,2.10000000000000,2.17800000000000;19,1.53900000000000,1.66200000000000,1.80500000000000,1.90300000000000,1.99300000000000,2.10400000000000,2.18300000000000;20,1.54100000000000,1.66400000000000,1.80800000000000,1.90600000000000,1.99700000000000,2.10800000000000,2.18700000000000;21,1.54300000000000,1.66700000000000,1.81000000000000,1.90800000000000,2,2.11200000000000,2.19100000000000;22,1.54500000000000,1.66900000000000,1.81300000000000,1.91100000000000,2.00300000000000,2.11500000000000,2.19400000000000;23,1.54700000000000,1.67000000000000,1.81500000000000,1.91300000000000,2.00500000000000,2.11800000000000,2.19800000000000;24,1.54900000000000,1.67200000000000,1.81700000000000,1.91600000000000,2.00800000000000,2.12100000000000,2.20100000000000;25,1.55000000000000,1.67400000000000,1.81900000000000,1.91800000000000,2.01000000000000,2.12300000000000,2.20300000000000;30,1.55600000000000,1.68100000000000,1.82600000000000,1.92600000000000,2.01900000000000,2.13400000000000,2.21500000000000;35,1.56100000000000,1.68600000000000,1.83200000000000,1.93300000000000,2.02600000000000,2.14100000000000,2.22300000000000;40,1.56500000000000,1.69000000000000,1.83700000000000,1.93800000000000,2.03200000000000,2.14800000000000,2.23000000000000;45,1.56800000000000,1.69400000000000,1.84100000000000,1.94200000000000,2.03600000000000,2.15200000000000,2.23500000000000;50,1.57100000000000,1.69700000000000,1.84400000000000,1.94600000000000,2.04000000000000,2.15700000000000,2.23900000000000;100,1.58800000000000,1.71400000000000,1.86200000000000,1.96500000000000,2.06000000000000,2.17800000000000,2.26200000000000;200,1.60000000000000,1.72600000000000,1.87600000000000,1.97900000000000,2.07500000000000,2.19400000000000,2.27900000000000;500,1.61000000000000,1.73700000000000,1.88700000000000,1.99000000000000,2.08700000000000,2.20700000000000,2.29200000000000;501,1.62000000000000,1.74700000000000,1.89800000000000,2.00100000000000,2.09800000000000,2.21800000000000,2.30300000000000];
alpha = [.10, .05, .02, .01, .005, .002, .001];
nn = ktable(:,1); 

% find correct row of the table
[easy, row] = ismember(n, nn);
if ~easy
   % find closest value if no entry is present)
   row = length(nn) - sum(n<nn); 
   if row == 0
       error('N too small.');
   else
      warning('N=%d not found in table, using closest N=%d present.',n,nn(row)) %#ok<WNTAG>
   end
end

% find minimal p-value and test-statistic
idx = find(ktable(row,2:end)<k,1,'last');
if ~isempty(idx)
  p = alpha(idx);
else
  p = 1;
end
K = ktable(row,idx+1);

end